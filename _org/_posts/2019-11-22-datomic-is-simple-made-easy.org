#+OPTIONS: toc:nil num:nil

#+BEGIN_EXPORT html
---
layout: post
title: Datomic is simple made easy
excerpt: The hits keep coming from Cognitect
---
#+END_EXPORT

I've recently begun evaluating [[https://www.datomic.com][Datomic]] for a project at work. Though the product has been around for [[https://www.youtube.com/watch?v=Cym4TZwTCNU][over 7 years]], it's the first opportunity I've had to investigate it in depth[fn:1]. Having had some experience with it, I've come to really like it, and will provide some thoughts on why I think Datomic is the /right/ database for many applications.

In Datomic, all data is stored as [[https://docs.datomic.com/on-prem/glossary.html#datom][datoms]], 5-tuples of entity-attribute-value-transaction-added. *Data is immutable*. Once you put (/assert/") a datom (a /fact/) into the database, it's there forever. A new fact can supersede, but not remove[fn:2], an old fact. This has amazing implications for *information retention*. Ever wanted to run a report against your data or experiment with a "what if" scenario from 6 months ago? With Datomic, it's as easy as [[https://docs.datomic.com/on-prem/clojure/index.html#datomic.api/as-of][requesting a snapshot]] of the database on that date.

The system is *easy to reason about*. Transactions are [[https://docs.datomic.com/on-prem/acid.html][ACID]] and serial, so there's a total ordering of events, which is [[https://docs.datomic.com/on-prem/log.html][available via the API]] as data structures to easily inspect and manipulate. This is a /much/ simpler model than the various [[https://www.postgresql.org/docs/current/transaction-iso.html][transaction isolation levels]] seen in RDBMS systems. It does limit the system's write performance, but many applications are more read than write-intensive, and a single thread kept busy, not contending with others, can be highly efficient.

*Read performance*, which Datomic is designed for, is dependent on caching and storage. Queries can be [[https://docs.datomic.com/on-prem/caching.html][cached]], and there's never a need to evict outdated data because the they're immutable facts that are /always true/. As memory is getting [[https://jcmit.net/memoryprice.htm][cheaper]] and more plentiful very quickly, especially via cloud providers like AWS, Datomic's performance stands to benefit as many users' result sets--or even entire databases--can be held in memory. The same is true r.e. [[https://docs.datomic.com/on-prem/storage.html][storage]], which is separated from other database concerns. Datomic can make use of various storage backends, from in-memory (amazing performance for tests) to [[http://cassandra.apache.org/][Cassandra]] (highly scalable & distributed).

The [[https://docs.datomic.com/on-prem/query.html][query language]], which seems formidable at first, has a number of advantages, including *composability*, due to use of data structures instead of strings, and *expressiveness*, thanks to the power of Datalog, the subset of Prolog the query language is based on. Logic programming makes navigating relationships between entities a breeze, as it spares the user the worry of going from here to there or there to here.

Speaking of navigation, "everything is a datom" makes [[https://docs.datomic.com/on-prem/indexes.html][indexing]] straightforward. There are only a few to worry about, and most are automatic--no worrying about which columns in which tables to index based on usage patterns. The configuration judgment calls[fn:3] and pervasive manual tweaking typical of other databases just isn't present in Datomic. And like the transaction log, indexes are [[https://docs.datomic.com/on-prem/clojure/index.html#datomic.api/index-range][exposed via the API]] as data structures, in case you need to do something the query language can't do fast enough.

There's a lot more to Datomic that can be discussed, but the point is this: the good folks at Cognitect designed a database chock full of lessons learned and good ideas from the past 40 years, which translates to a downright /pleasing/ product to work with. I highly recommend anyone starting a new project to give Datomic a try; even if you decide it's not right for you, I guarantee you'll have learned a lot about database design from the experience.

* Footnotes

[fn:1] Previous attempts at playing with it in my own time had been discouraged by the closed source, [[https://docs.datomic.com/on-prem/architecture.html][novel architecture]], and alien, [[https://en.wikipedia.org/wiki/Datalog][Datalog]]-inspired [[https://docs.datomic.com/on-prem/query.html][query language]].

[fn:2] There's an [[https://docs.datomic.com/on-prem/excision.html][excision API]] that serves as an escape valve for e.g. regulatory and performance needs, but in general once something is in Datomic, it's there forever.

[fn:3] Which doesn't mean there aren't [[https://docs.datomic.com/on-prem/system-properties.html][things to configure]]--just different, higher-level, more interesting decisions to be made.
